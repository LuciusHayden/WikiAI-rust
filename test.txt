pub trait Processable {
    fn convert_data(&self) -> String; 
}
pub fn process_data<T>(query : &str, context : T) -> String 
    where T: Processable,
{
    
    let auth = Auth::from_env().unwrap();

    let openai = OpenAI::new(auth, "https://api.openai.com/v1/");
    let body = ChatBody {
        model : "gpt-3.5-turbo".to_string(),
        max_tokens: Some(5),
        temperature: Some(0_f32),
        top_p: Some(0_f32),
        n: Some(2),
        stream: Some(false),
        stop: None,
        presence_penalty: None,
        frequency_penalty: None,
        logit_bias: None,
        user: None,
        messages : vec![Message { role: Role::System, content: "".to_string()}, Message {role: Role::User, content: query.to_string() }],
    };

    let rs = openai.chat_completion_create(&body);
    let choice = rs.unwrap().choices;
    choice[0].message.as_ref().unwrap().content.clone()
} 



#[cfg(test)]
mod tests {
    use super::*;


}
